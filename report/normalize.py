# Copyright 2018 The Bazel Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from report import go

class SourceFilenameNormalizer:
  def __init__(self, go_importmap = None):
    self.go_importmap = go_importmap

  def normalize_source_filename(self, fn):
    # if fn.endswith(".go"):
    #   if not self.go_importmap:
    #     raise Error(
    #       "cannot normalize *.go source file names since no " +
    #       "go_importmap was provided")
    #   return fn
    # else:
    return fn

  def normalize_coverage_dat(self, cov):
    if len(cov) == 0:
      return []

    if cov[0].startswith("mode: "):
      # We assume this is a coverage report generated by rules_go
      # in Go's coverprofile format.
      cov = go.Coverprofile(cov).to_lcov()

    res = []
    has_records = False
    for line in cov:
      if line.startswith("SF:"):
        res.append("SF:" + self.normalize_source_filename(line[len("SF:"):]))
      else:
        if line.startswith("DA:") or line.startswith("FNDA:"):
          has_records = True
        res.append(line)

    if not has_records:
      return []    
    return res